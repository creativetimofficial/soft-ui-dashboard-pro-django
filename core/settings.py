"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
# This makes it easy to switch between different environments (development, production, etc.)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is the root directory of your project. This is where Django will look for files like templates, static files, etc.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY is used by Django for security purposes (sessions, tokens, etc.). 
# It should be unique and kept secret, especially in production.
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    # Generate a random secret key if none is provided in .env (useful for development)
    SECRET_KEY = ''.join(random.choice(string.ascii_lowercase) for i in range(32))

# DEBUG mode is for development only.
# When DEBUG is True, Django will display detailed error pages. Set it to False in production.
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS defines which domains can access your Django app.
# It's important to set this correctly in production to prevent security vulnerabilities.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# If deployed to Render or other services, this environment variable will be used to add the external hostname to ALLOWED_HOSTS.
RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition: INSTALLED_APPS contains all the apps your project will use, including Djangoâ€™s built-in apps and any third-party or custom apps.
INSTALLED_APPS = [
    'admin_soft_pro.apps.AdminSoftProConfig',  # The soft admin dashboard theme
    "django.contrib.admin",   # Django admin site
    "django.contrib.auth",    # Authentication framework
    "django.contrib.contenttypes",   # Framework for content types (required for models)
    "django.contrib.sessions",  # Session management
    "django.contrib.messages",  # Messaging framework
    "django.contrib.staticfiles",  # Manages static files (CSS, JS, etc.)

    "home",  # Custom app (example app)
]

# MIDDLEWARE is a list of components that are used to process requests and responses.
# Middleware can modify requests/responses or apply actions like security, session handling, etc.
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Provides security features
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Helps serve static files in production
    "django.contrib.sessions.middleware.SessionMiddleware",  # Manages sessions
    "django.middleware.common.CommonMiddleware",  # Provides various security features
    "django.middleware.csrf.CsrfViewMiddleware",  # Cross-Site Request Forgery protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Manages authentication
    "django.contrib.messages.middleware.MessageMiddleware",  # Manages flash messages
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Prevents clickjacking attacks
]

# ROOT_URLCONF tells Django where to find the URL configurations (which map URLs to views).
ROOT_URLCONF = "core.urls"

# Templates: Define where to find the HTML templates and how to process them.
# APP_DIRS=True means Django will automatically look for templates inside each app's "templates" folder.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'home', 'templates')],  # Custom template directory
        "APP_DIRS": True,  # Enable searching for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # Needed for request-related functionality in templates
                "django.contrib.auth.context_processors.auth",  # Adds the current user object in templates
                "django.contrib.messages.context_processors.messages",  # Enables message framework in templates
            ],
        },
    },
]

# WSGI_APPLICATION is the entry point for WSGI-compatible web servers to serve your project.
WSGI_APPLICATION = "core.wsgi.application"

# Database configuration
# This dynamically sets the database engine and connection details from .env.
# If no database is set up, Django falls back to using SQLite (default).
DB_ENGINE = os.getenv('DB_ENGINE')
DB_NAME = os.getenv('DB_NAME')
DB_USERNAME = os.getenv('DB_USERNAME')
DB_PASS = os.getenv('DB_PASS')
DB_HOST = os.getenv('DB_HOST')
DB_PORT = os.getenv('DB_PORT')

# If DB credentials are provided, Django will use them, otherwise SQLite is the default database for development.
if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.' + DB_ENGINE,  # Example: 'django.db.backends.mysql'
            'NAME': DB_NAME,
            'USER': DB_USERNAME,
            'PASSWORD': DB_PASS,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',  # Default to SQLite if no DB engine is provided
            'NAME': 'db.sqlite3',  # SQLite database file
        }
    }

# Password validation: Django provides built-in password validators to enforce security rules for user passwords.
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization settings
# LANGUAGE_CODE defines the default language for the project (e.g., 'en-us' for US English).
# TIME_ZONE is the default timezone for date and time-related functions.
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True  # Enables internationalization
USE_TZ = True  # Enables timezone support

# Static files (CSS, JavaScript, Images) configuration
# STATIC_URL is the base URL for accessing static files.
# STATIC_ROOT is the directory where Django will collect all static files for production.
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# In production, Whitenoise helps serve static files more efficiently (compressed and cached versions).
# Enable this only when DEBUG=False (production mode).
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type: Tells Django to use a BigAutoField for model primary keys unless specified otherwise.
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Login redirection URL: After a successful login, the user will be redirected to the homepage ('/').
LOGIN_REDIRECT_URL = '/'

# Email backend: Console email backend is used for development (prints emails to the console).
# In production, you'll need to use an actual email backend (SMTP, etc.).
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Optional debug prints to check if SECRET_KEY and GITHUB_TOKEN are loaded correctly
print(f"SECRET_KEY: {SECRET_KEY}")
print(f"GITHUB_TOKEN: {os.getenv('GITHUB_TOKEN')}")
